{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":19,"id":"b30d2a","input":"## Setup\n\n# Import all packages for the workshop\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport scipy.ndimage as sn\n\n# Load example image\nA = mpimg.imread(\"bw.png\")\nA = np.mean(A, axis=2)","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"cc4408","input":"# Adjust these index values to get the red box\nleft = 2\nright = 6\ntop = 4\nbottom = 7\n\nplt.imshow( A[top:bottom, left:right], \n            cmap=plt.get_cmap('Greys_r'))\n\n# NB This line ensures that the colour scaling remains consistent regardless of cropping\nplt.clim(np.amin(A), np.amax(A))","output":{"0":{"data":{"image/png":"a8511cf1b144a959039923f1767cc1613753b329","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"c088cb","input":"def largest_blob_coords(image, thresh):\n    \n    # Threshold the image\n    bw = (image > thresh).astype(int)\n    \n    # Label the blobs\n    labels, n = sn.label(bw)\n    \n    sizes = sn.sum(bw, labels, range(1, n+1))\n    idx = np.argmax(sizes)\n    \n    y, x = sn.center_of_mass(bw, labels, idx + 1) \n    \n    return x, y","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"1ff35a","input":"A = mpimg.imread(\"bw.png\")\nA = np.mean(A, axis=2)\n\nx, y = largest_blob_coords(A, 0.7)\nprint(x,y)","output":{"0":{"name":"stdout","output_type":"stream","text":"2.5 3.5\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"d65a63","input":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ncap = cv2.VideoCapture('atomic.avi')\n\nframeCount = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\nframeWidth = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\nframeHeight = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n\nbuf = np.zeros((frameCount, frameHeight, frameWidth, 3), np.dtype('int16'))\n\nfc = 0\nret = True\n\nwhile (fc < frameCount  and ret):\n    ret, buf[fc] = cap.read()\n    fc += 1\n\ncap.release()\n\ndata = np.mean(buf[:,:,:,:], axis=-1)\n\nprint(\"Data array dimensions:\", data.shape)\nprint(\"Number of frames:\", data.shape[0])","output":{"0":{"name":"stdout","output_type":"stream","text":"Data array dimensions: (200, 480, 640)\nNumber of frames: 200\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"a8aba3","input":"f = data[0,:,:] # extract the first frame\n\nx_min = 400\nx_max = 600\ny_min = 10\ny_max = 150\n\n# Indicate cropping boundaries\nplt.figure(figsize=(7,7))\nplt.imshow(f)\n\nplt.axvline(x_min)\nplt.axvline(x_max)\nplt.axhline(y_min)\nplt.axhline(y_max)\n\nf_cropped = data[0, y_min:y_max, x_min:x_max]\n\n# Cropped figure\nplt.figure(figsize=(7,7))\nplt.imshow(f_cropped)","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x13ec56f70>"},"exec_count":30,"output_type":"execute_result"},"1":{"data":{"image/png":"af2cc2e94f585236cd54b0bf3e92188e08194a05","text/plain":"<Figure size 504x504 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"5edf7807d565cf380fdba8eb5712a626e783ee45","text/plain":"<Figure size 504x504 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"22656f","input":"# Threshold value\nt = 150\n\nf = data[0, y_min:y_max, x_min:x_max]\nplt.figure()\nplt.imshow(f)\n\nf_threshold = (f > t).astype(int)\nplt.figure()\nplt.imshow(f_threshold)\n\n# Add code to determine blob coordinates\nx, y = largest_blob_coords(f, t)\nplt.scatter(x, y, color=\"black\", marker=\"x\")","output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x13ed20d30>"},"exec_count":34,"output_type":"execute_result"},"1":{"data":{"image/png":"2bafb7fd54d3f2dbc87f1966e99016bb64d84329","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"5428b8b62946a283135bd624d3a6543079577227","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"f19443","input":"# Define some constants: number of frames to analyse, and threshold value\nnum_frames = 20\nthresh = 150\n\n# Create arrays for storing blob coordinates\nx_pos_array = np.zeros(num_frames)\ny_pos_array = np.zeros(num_frames)\n\n# Loop through frames in defined range\nfor i in range(num_frames):\n    \n    # Extract current frame\n    f = data[i, y_min:y_max, x_min:x_max]\n    \n    # Add code to obtain the x and y coordinates of the largest \n    # particle in the current frame\n    x_pos, y_pos = largest_blob_coords(f, thresh)\n    \n    # Store the current coordinates in the corresponding position \n    x_pos_array[i] = x_pos\n    y_pos_array[i] = y_pos\n\n\n# Plot particle trajectory\nplt.figure(figsize=(5,5))\nax = plt.gca()\nax.set_facecolor('k')\n\n# Uncomment the following line to see the underlying image! (first frame)\n#plt.imshow(data[0, y_min:y_max, x_min:x_max])\n\nplt.plot(x_pos_array, y_pos_array, 'w-')\nplt.xlim(0, x_max-x_min)\nplt.ylim(0, y_max-y_min)\n\nax.invert_yaxis()\nax.set_aspect('equal')","output":{"0":{"data":{"image/png":"756aecc3e159f2d6a8c73e3f2734975d1f0eff3f","text/plain":"<Figure size 360x360 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"101926","input":"# Videos\n\nLoad video data","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"29f686","input":"# Images: loading and indexing","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"3b4565","input":"Test function using the 8x8 image A from earlier:","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"3ed9f2","input":"Crop the first frame frame","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"cfe0d8","input":"Slice indexing for cropping.\n\n```{image} slice_exercise.png\n:width: 200px\n```","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"f40c30","input":"# Thresholding\n\nWrite a function that takes two inputs: a grayscale image, and a threshold value. Your function should then return the x and y co-ordinates of the largest blob in that image.","pos":4,"type":"cell"}
{"id":0,"time":1638820217944,"type":"user"}
{"last_load":1637065332324,"type":"file"}