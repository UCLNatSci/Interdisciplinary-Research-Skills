{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-bf6e7a6c-bf44-4cdd-ac16-16d7af55f786.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":2,"id":"985f84","input":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation\nfrom IPython.display import HTML, display\nimport random","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"02164c","input":"## Individual planets (Earth, Mercury)\n\nau = 1.496e8\nyear = 365.256\n\n# Orbital constants for Earth and Mercury\nd_e = 1 * au\np_e = 1 * year\nd_m = 0.387 * au\np_m = 87.969\n\n# 1 Year of timepoints, at 5 day intervals\nt = np.arange(0, year, 5)\n\n# Position coordinates for Earth and Mercury for each timepoint in t\nx_e = d_e * np.cos(2*np.pi*t/p_e)\ny_e = d_e * np.sin(2*np.pi*t/p_e)\nx_m = d_m * np.cos(2*np.pi*t/p_m)\ny_m = d_m * np.sin(2*np.pi*t/p_m)\n\n\n# Set up the figure\nfilename = \"animation.gif\"\ninterval = 100\nframes = len(t)\n\ndef ganimate(frame):\n    plt.cla()\n    # Plot a yellow circle in the middle to represent the Sun\n    plt.plot(0,0, 'oy')\n    # Plot orbital positions of Earth and Mercury for current frame\n    plt.scatter(x_e[frame], y_e[frame])\n    plt.scatter(x_m[frame], y_m[frame])\n    # Set the axis limits to the minimum and maximum x,y coordinates of Earth\n    plt.xlim(min(x_e), max(x_e))\n    plt.ylim(min(y_e), max(y_e))\n\nfig = plt.figure(figsize=(5, 5))\nanim = animation.FuncAnimation(fig, ganimate, frames=frames, interval=interval)\nanim.save(filename, writer='imagemagick')\nplt.close()\n\n__counter__ = str(random.randint(0,2e9))\ndisplay(HTML('<img src=\"' + filename + '?' + __counter__ + '\">'))","output":{"0":{"data":{"text/html":"<img src=\"animation.gif?1830027587\">","text/plain":"<IPython.core.display.HTML object>"},"exec_count":3,"output_type":"execute_result"}},"pos":2,"tags":{"remove-output":true},"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"2050a9","input":"## Inner planets: Using arrays and for loops\n\nau = 1.496e8\nyear = 365.256\n\n# Inner planets only\ndistances = np.array([[0.387, 0.723, 1, 1.524]]) * au\nperiods = np.array([[87.969, 224.701, 1*year, 686.98]])\n\n# Make animation last for full orbit of Mars, 10 day intervals\n# (N.B.: [:, np.newaxis] is needed for succesful broadcasting)\nt = np.arange(0, np.amax(periods), 10)[:, np.newaxis]\n\n# Compute orbital coordinates\nx_planets = distances * np.cos(2*np.pi*t/periods)\ny_planets = distances * np.sin(2*np.pi*t/periods)\n\n# Set up figure\nfilename = \"animation.gif\"\ninterval = 100\nframes = len(t)\n\ndef ganimate(frame):\n    plt.cla()\n    \n    # Plot a yellow circle in the middle to represent the Sun\n    plt.plot(0,0, 'oy')\n    \n    # Create a line highlighting the orbit of Earth\n    plt.plot(x_planets[:,2], y_planets[:,2], linewidth=0.5)\n    \n    # For each planet, plot its current position for the frame\n    for p in range(max(periods.shape)):\n        plt.scatter(x_planets[frame, p], y_planets[frame, p])\n    \n    # Set axis limits to correspond to the minimum and maximum x and y positions\n    # out of all planet orbits\n    plt.xlim(np.amin(x_planets), np.amax(x_planets))\n    plt.ylim(np.amin(y_planets), np.amax(y_planets))\n    \nfig = plt.figure(figsize=(5, 5))\n\nanim = animation.FuncAnimation(fig, ganimate, frames=frames, interval=interval)\nanim.save(filename, writer='imagemagick')\nplt.close()\n\n__counter__ = str(random.randint(0,2e9))\ndisplay(HTML('<img src=\"' + filename + '?' + __counter__ + '\">'))","output":{"0":{"name":"stderr","output_type":"stream","text":"MovieWriter imagemagick unavailable; using Pillow instead.\n"},"1":{"data":{"text/html":"<img src=\"animation_arrays_loops.gif?1532407271\">","text/plain":"<IPython.core.display.HTML object>"},"exec_count":4,"output_type":"execute_result"}},"pos":4,"tags":{"remove-output":true},"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"34bc5a","input":"## Entire solar system\n\nau = 1.496e8\nyear = 365.256\n\ndistances = np.array([[0.387, 0.723, 1, 1.524,        # Inner planets\n                       5.203, 9.537, 19.191, 30.069,  # Outer planets\n                       39.482]]) * au                 # Pluto :)\nperiods = np.array([[87.969, 224.701, 1*year, 686.98,\n                     11.862*year, 29.457*year, 84.011*year, 164.79*year,\n                     247.94*year]])\n\n# Make animation last for full orbit of Pluto, Using np.linspace() to generate 200 values\n# (N.B.: [:, np.newaxis] is needed for succesful broadcasting)\nt = np.linspace(0, np.amax(periods), 200)[:, np.newaxis]\n\n# Compute orbital coordinates\nx_planets = distances * np.cos(2*np.pi*t/periods)\ny_planets = distances * np.sin(2*np.pi*t/periods)\n\n# Set up figure\nfilename = \"animation.gif\"\ninterval = 100\nframes = len(t)\n\ndef ganimate(frame):\n    plt.cla()\n    \n    # Plot a yellow circle in the middle to represent the Sun\n    plt.plot(0,0, 'oy')\n    \n    # For each planet, plot its current position for the frame\n    for p in range(max(periods.shape)):\n        plt.scatter(x_planets[frame, p], y_planets[frame, p])\n    \n    # Set axis limits to correspond to the minimum and maximum x and y positions\n    # out of all planet orbits\n    plt.xlim(np.amin(x_planets), np.amax(x_planets))\n    plt.ylim(np.amin(y_planets), np.amax(y_planets))\n    \nfig = plt.figure(figsize=(8, 8))\nanim = animation.FuncAnimation(fig, ganimate, frames=frames, interval=interval)\nanim.save(filename, writer='imagemagick')\nplt.close()\n\n__counter__ = str(random.randint(0,2e9))\ndisplay(HTML('<img src=\"' + filename + '?' + __counter__ + '\">'))","output":{"0":{"name":"stderr","output_type":"stream","text":"MovieWriter imagemagick unavailable; using Pillow instead.\n"},"1":{"data":{"text/html":"<img src=\"animation_solar_system.gif?1056024221\">","text/plain":"<IPython.core.display.HTML object>"},"exec_count":5,"output_type":"execute_result"}},"pos":6,"tags":{"remove-output":true},"type":"cell"}
{"cell_type":"markdown","id":"332d13","input":"Finally, if we want to animate the entire solar system, we'll need to make sure we have a sensible number of frames.\n\n> Use `np.arange` to create an array of values with an interval which you define yourself: `np.arange(start, stop, step)`\n\n> Use `np.linspace` to create an array with a defined number of evenly spaced values: `np.linspace(start, stop, nvals)`.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"6837fd","input":"If we want to plot many planets, using arrays and loops can save us many lines of code","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"b68230","input":"# Sample solutions for Virtual Orrery\n\nBelow are 3 possible solution to the orrery challenge exercise, with different levels of complexity.","pos":0,"type":"cell"}
{"id":0,"time":1636824556967,"type":"user"}
{"last_load":1636970046607,"type":"file"}