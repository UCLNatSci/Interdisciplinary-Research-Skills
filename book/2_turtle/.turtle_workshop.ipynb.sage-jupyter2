{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-d0663623-31f4-4e86-b417-dfed9100b004.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"7af785","input":"","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"30243a","input":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Function definitions\n\ndef start():\n    state[0] = 0\n    state[1] = 0\n    state[2] = 0\n    \n    fig = plt.figure(figsize=(4,4))\n    ax = fig.add_subplot(111)\n    ax.set_aspect('equal', adjustable='box')\n\ndef draw_forward(dis):\n    x = state[0]\n    y = state[1]\n    angle = state[2]\n    state[0] = x + np.cos(angle) * dis\n    state[1] = y + np.sin(angle) * dis\n    plt.plot([x, state[0]], [y, state[1]], color=\"black\", linewidth=2)\n    \ndef move_forward(dis):\n    x = state[0]\n    y = state[1]\n    angle = state[2]\n    state[0] = x + np.cos(angle) * dis\n    state[1] = y + np.sin(angle) * dis\n    \ndef rotate_left(theta):\n    state[2] = state[2] + theta * np.pi / 180\n    \nstate = [0, 0, 0]","pos":1,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ac3264","input":"# Example: draw a unit square\nstart()\ndraw_forward(1)\nrotate_left(90)\ndraw_forward(1)","output":{"0":{"data":{"image/png":"7724e6214d0470e84628ed896467c434c3b0088a","text/plain":"<Figure size 288x288 with 1 Axes>"},"exec_count":2,"metadata":{"image/png":{"height":248,"width":254},"needs_background":"light"},"output_type":"execute_result"}},"pos":3,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"73f08c","input":"start()\nfor i in range(4):\n    draw_forward(1)\n    rotate_left(90)","output":{"0":{"data":{"image/png":"ad2a602d78f04a54ca61c8f90e4c3ff73f26824f","text/plain":"<Figure size 288x288 with 1 Axes>"},"exec_count":3,"metadata":{"image/png":{"height":248,"width":254},"needs_background":"light"},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"14d71d","input":"# Workshop 2: Turtle Graphics\n\n[Turtle Graphics](https://en.wikipedia.org/wiki/Turtle_graphics) is a graphical computer language often used to introduce programming to beginners. The user controls an on-screen turtle by sending commands such as 'forward 50' and 'rotate 90'. The turtle follows the commands in sequence, drawing a line as it moves.\n\n![Turtle Graphics](220px-Turtle-animation.gif)\n\nIn this workshop, we will investigate a 'Turtle Graphics' program using Python, and use it to demonstrate some key programming concepts.\n\n:::{admonition} What you'll learn\n1. How to construct a Python program from a sequence of instructions\n1. How to repeat sections of code using loops\n1. How to assemble more complicated programs by combining instructions into functions\n:::\n\n## Question 1\n\nThe code below implements a simple Turtle Graphics program. Don't worry, you're not expected to understand it - some of this is quite advanced!\n\n> Paste the code into a new code cell. ","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"27df9d","input":"If you run the code cell, you should see a backwards 'L' shape in a box, like above. Let's examine each line of the five lines of code.\n\n1. The first line begins with a `#` symbol. This indicates that the line is a *comment* and will be ignored by Python.\n1. The next line initialises the Turtle and creates a plotting area.\n1. We instruct the Turtle to move forward 1 unit.\n1. We instruct the Turtle to turn left 90 degrees.\n1. We instruct the Turtle to move forward 1 unit.\n\nNotice that, even though we may not understand the entire Turtle program, we can understand how to use it to draw shapes.\n\n> Write more lines of code so that the Turtle draws a square (you can create a new code cell, or just edit the existing one).\n\nA regular hexagon is a six-sided shape with equal side lengths and internal angles.\n\n> In a new code cell, write code to instruct the Turtle to draw a regular hexagon (you will need to choose a suitable rotation angle).\n\n:::{admonition} Computer Program\nA computer program is an ordered sequence of instructions which direct the computer to perform a specific task. The computer executes each instruction in turn, resulting in the desired output.\n:::\n\n## Question 2\n\nIn principle, we could use the same technique to generate any $n$-sided polygon. But there's a smarter way, which means that we don't have to endlessly repeat ourselves, using *loops*. Here is how to draw a square using a `for` loop:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"5daecb","input":"\n## Question 4\n\nCan you reproduce the figures below?\n\n```{glue:} turtle_rotated_squares\n```\n\n```{glue:} turtle_circles\n```\n*Hint: approximate a circle by a polygon with a large number of sides* ","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"9e5c55","input":"> If you run the code, nothing appears to happen.\n> Create another code cell and paste the following code:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"c61d84","input":"> Rewrite your hexagon code using a `for` loop.\n\n:::{admonition} `for` loop\nA `for` loop instructs the computer to repeat a set of instructions a specified number of times. For example, the following code would print the numbers 1 to 10.\n\n```\nfor i in range(10):\n    print(i)\n```\n:::\n\n## Question 3\n\nThe following code defines a function which draws a square, using the code above:\n\n```\ndef draw_square():\n    for i in range(4):\n        draw_forward(1)\n        rotate_left(90)\n```\n\n> Paste this code into the top code cell, immediately below where it says `# function definitions`, then run the code cell.\n\n> In a new code cell, enter the code below and run it:\n\n```\nstart()\ndraw_square()\n```\n\n> Create new functions `draw_triangle()`, `draw_pentagon`, `draw_hexagon` and `draw_heptagon`. Create a new code cell and use the functions to reproduce the figure below. (use the function `move_forward` to move the Turtle without drawing).\n\n```{glue:} turtle_polygons\n```\n\n:::{admonition} Functions\nA function is a set of instructions combined together to achieve a specific outcome. Functions are a good alternative to having repeating blocks of code in a program.\n:::","pos":6,"type":"cell"}
{"id":0,"time":1632254130005,"type":"user"}
{"last_load":1632341023519,"type":"file"}